import { qs, qsa } from "../dom/selector.js";
import { $delegate, $on, $one } from "../dom/event-handlers.js";
import JsonFetcher from "../fetchers/JsonFetcher.js";
import PokemonTemplate from "./PokemonTemplate.js";
import { removeItemAll } from "../helpers/array.js";

const FILTER_ALL = "all";
const FILTER_SELECTED_DATA_KEY = "data-selected";

const SELECTOR_POKEMON = "[data-pokemon]";

const CLASS_NAME_SELECTED = "is-selected";
const CLASS_NAME_HIDDEN = "is-hidden";

export default class PokemonView {
    constructor() {        
        this.fetcher = new JsonFetcher();
        this.template = new PokemonTemplate(); // Not used since all is generated by PHP
        this.currentlySelectedTypes = [ FILTER_ALL ];
        this.$pokemonContainer = qs(".pokemon-container");
        this.$pokemonFilter = qs("[data-pokemon-filter]");
        
        this.registerEventHandlers();
    }

    registerEventHandlers() {
        $delegate(this.$pokemonFilter, "click", "button", (e) => {
            const selectedFilter = e.target;
            const selectedType = selectedFilter.dataset.pokemonType;            
            this._toggleFilterButtonState(selectedFilter, selectedType);
            this._toggleFilterAllButtonState(selectedType);
            this._filterAllPokemons();
        });
    }

    _toggleFilterButtonState(filter, selectedValue) {
        if (filter.hasAttribute(FILTER_SELECTED_DATA_KEY)) {
            this._unselectFilterButton(filter, selectedValue);
        } else {
            this._selectFilterButton(filter, selectedValue);            
        }
    }

    _toggleFilterAllButtonState(selectedValue) {
        const allButton = qs(`[data-pokemon-type="${FILTER_ALL}"]`);
        if (selectedValue === FILTER_ALL) {
            this._unselectAllFilterButtons();
        } else if (this.currentlySelectedTypes.length > 1) {
            this._unselectFilterButton(allButton, FILTER_ALL);
        } else if (this.currentlySelectedTypes.length === 0) {
            this._selectFilterButton(allButton, FILTER_ALL);
        }
    }

    _selectFilterButton(filter, selectedValue) {
        filter.setAttribute(FILTER_SELECTED_DATA_KEY, "");
        filter.classList.add(CLASS_NAME_SELECTED);
        this.currentlySelectedTypes.push(selectedValue);
    }

    _unselectFilterButton(filter, selectedValue) {
        filter.removeAttribute(FILTER_SELECTED_DATA_KEY);
        filter.classList.remove(CLASS_NAME_SELECTED);
        removeItemAll(this.currentlySelectedTypes, selectedValue);
    }

    _unselectAllFilterButtons() { 
        const buttons = qsa(`[data-pokemon-type]:not([data-pokemon-type="${FILTER_ALL}"])`);
        for (const button of buttons) {
            this._unselectFilterButton(button, button.dataset.pokemonType);
        }
    }

    _filterAllPokemons() {
        const pokemons = qsa(SELECTOR_POKEMON, this.$pokemonContainer);
        for (const pokemon of pokemons) {
            this._togglePokemonVisibility(pokemon);
        }
    }

    _togglePokemonVisibility(pokemon) {
        if (this._shouldPokemonBeVisible(pokemon)) {
            pokemon.classList.remove(CLASS_NAME_HIDDEN);
        } else {
            pokemon.classList.add(CLASS_NAME_HIDDEN);
        }
    }
    
    _shouldPokemonBeVisible(pokemon) {
        if (this.currentlySelectedTypes.includes(FILTER_ALL)) {
            return true;
        }
        const types = pokemon.dataset.pokemonTypes.split(",");
        return types.some(type => this.currentlySelectedTypes.includes(type.toLowerCase()));
    }
}